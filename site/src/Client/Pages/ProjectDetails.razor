@page "/ProjectDetails/{projectId:guid?}"

@using TSITSolutions.ContactSite.Shared.Projects
@inject StronglyTypedStringLocalizerForResource Localizer
@inject ILocalStorageService LocalStorage
@inject HttpClient Http

<PageTitle>@Localizer.CompanyName - @Localizer.ProjectsPageTitle | @(_project?.Title ?? "...")</PageTitle>

@if (_project == null)
{
    <MudLink Href="/Projects" Underline="Underline.None">
        <MudText Typo="Typo.body1">&lt; @Localizer.ProjectDetails_Back</MudText>
    </MudLink>
    
    <MudText Typo="Typo.body1">@Localizer.Shared_Loading</MudText>
}
else
{
    <BasicBreadcrumbs AdditionalItems="_breadcrumbs" />

    <MudGrid Spacing="2">
        <MudItem xs="12">
            <MudText Typo="Typo.h3">@_project.Title</MudText>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Elevation="5" Class="pa-2">
                <TechnologyList Technologies="@_project.Technologies"/>
            </MudPaper>
        </MudItem>

        <ProjectDetailsTile Title="@Localizer.ProjectDetails_Grid_CustomerDomain" Content="@_project.CustomerDomain" />
        <ProjectDetailsTile Title="@Localizer.ProjectDetails_Grid_Duration" Content="@GetYearRange()" />
        <ProjectDetailsTile Title="@Localizer.ProjectDetails_Grid_ProjectDescription" Content="@_project.Description" IsMarkdown="true"/>
        <ProjectDetailsTile Title="@Localizer.ProjectDetails_Grid_MyRole" Content="@_project.Role" IsMarkdown="true" />
        
    </MudGrid>
}

@code {

    [Parameter]
    public Guid? ProjectId { get; set; }

    private ProjectResponse? _project;
    private readonly List<BreadcrumbItem> _breadcrumbs = new();
    private string? _currentCulture;

    protected override async Task OnInitializedAsync()
    {
        _currentCulture = await LocalStorage.GetItemAsync<string>("culture");
        if (ProjectId.HasValue)
        {
            _project = await Http.GetFromJsonAsync<ProjectResponse>($"api/projects/{ProjectId}" + (string.IsNullOrEmpty(_currentCulture) ? string.Empty : $"?culture={_currentCulture}"));
            if (_project == null)
            {
                return;
            }
            _breadcrumbs.Clear();
            _breadcrumbs.Add(new BreadcrumbItem(Localizer.ProjectsPageTitle, href: "/Projects"));
            _breadcrumbs.Add(new BreadcrumbItem($"{_project.Title} | {GetYearRange()}", href: null, disabled: true));
        }
    }

    private string GetYearRange()
    {
        var endDate = _project!.EndDate.HasValue ? _project.EndDate.Value.Year.ToString() : Localizer.Projects_Timeline_today;
        return $"{_project.StartDate.Year} - {endDate}";
    }

}