@page "/Projects"
@using TSITSolutions.ContactSite.Shared.Projects
@using TSITSolutions.ContactSite.Client.Infrastructure
@inject IStringLocalizer<Resource> Localizer
@inject ILocalStorageService LocalStorage
@inject TechnologyService TechnologyService
@inject HttpClient Http

<PageTitle>@Localizer["CompanyName"] - @Localizer["ProjectsPageTitle"]</PageTitle>

<BasicBreadcrumbs AdditionalItems="_breadcrumbs"/>

<MudText Typo="Typo.h3" GutterBottom="true">@Localizer["ProjectsHeader"]</MudText>

@if (_filteredProjects == null)
{
    <MudText Typo="Typo.body1">@Localizer["Shared_Loading"]</MudText>
}
else
{
    <MudGrid Spacing="1">
        <MudItem xs="2">
            <MudPaper Elevation="0" Class="d-flex mud-width-full align-center justify-center pa-8">
                <MudText Typo="Typo.h6">@Localizer["Projects_Toolbar_Filter"]:</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="10">
            <MudPaper Elevation="5" Class="pa-2">
                <MudChipSet T="string" SelectionMode="SelectionMode.MultiSelection" SelectedValues="_selectedTechnologies" SelectedValuesChanged="OnSelectedTechnologiesChanged">
                    @foreach (var technology in _filteredTechnologies)
                    {
                        <MudChip T="string" Value="@technology.Name">
                            <MudText Typo="Typo.button">@technology.Name (@technology.Count)</MudText>
                        </MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        </MudItem>
        <MudItem sm="12" md="8">
            <MudTimeline >

                @foreach (var project in _filteredProjects)
                {
                    <MudTimelineItem Color="Color.Info" Size="Size.Medium">
                        <ItemOpposite>
                            <MudText Typo="Typo.h5" Color="Color.Info">@GetYearRange(project)</MudText>
                        </ItemOpposite>
                        <ItemContent>
                            <MudCard Outlined="false" Elevation="10">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@project.Title</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <TechnologyList Technologies="@project.Technologies"/>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@("/ProjectDetails/" + project.Id)">Read More</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </ItemContent>
                    </MudTimelineItem>
                }

            </MudTimeline>
        </MudItem>
    </MudGrid>
}

@code
{
    private List<ProjectResponse>? _projects = new();
    private List<ProjectResponse>? _filteredProjects = new();
    private List<(string Technology, DateOnly FirstUsed)> _allTechnologies = new();
    private List<(string Name, int Count)> _filteredTechnologies = new();
    private readonly List<BreadcrumbItem> _breadcrumbs = new();
    private string? _currentCulture;
    private IReadOnlyCollection<string> _selectedTechnologies = new HashSet<string>();

    protected override async Task OnInitializedAsync()
    {
        _breadcrumbs.Clear();
        _breadcrumbs.Add(new BreadcrumbItem(@Localizer["ProjectsPageTitle"], href: null, disabled: true));
        var route = "/api/Projects";
        _currentCulture = await LocalStorage.GetItemAsync<string>("culture");
        if (!string.IsNullOrEmpty(_currentCulture))
        {
            route += "?culture=" + _currentCulture;
        }
        var projectsResponse = await Http.GetFromJsonAsync<ProjectsResponse>(route);
        _projects = projectsResponse?.Projects.OrderByDescending(p => p.StartDate).ToList() ?? new();
        _filteredProjects = _projects!.ToList();

        _allTechnologies = _projects
            .SelectMany(p => p.Technologies
                .Select(t => (Start: p.StartDate, Technology: t)))
            .GroupBy(t => t.Technology)
            .Select(g => (Technology: g.Key, FirstUsed: g.Max(t => t.Start)))
            .ToList();
        CalculateFilteredTechnologies();
    }

    private string GetYearRange(ProjectResponse project)
    {
        var endDate = project.EndDate.HasValue ? project.EndDate.Value.Year.ToString() : @Localizer["Projects_Timeline_today"];
        return $"{project.StartDate.Year} - {endDate}";
    }

    private void ApplyTechnologyFilter(IReadOnlyCollection<string> values)
    {
        _filteredProjects = _projects!.Where(p => values.All(t => p.Technologies.Contains(t))).ToList();
        CalculateFilteredTechnologies();
    }

    private void OnSelectedTechnologiesChanged()
    {
        ApplyTechnologyFilter(_selectedTechnologies);
    }

    private void CalculateFilteredTechnologies()
    {
        _filteredTechnologies = _allTechnologies
            .OrderByDescending(t => t.FirstUsed)
            .Select(t => t.Technology)
            .Select(t => 
                (Named: t, Count: _filteredProjects!
                    .Count(p => p.Technologies.Contains(t))))
            .ToList();
    }
}